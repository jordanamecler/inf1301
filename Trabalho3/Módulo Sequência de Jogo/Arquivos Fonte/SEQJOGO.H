#if ! defined( SEQJOGO_ )
#define SEQJOGO_
/***************************************************************************
 *
 *  $MCD MÃƒÆ’Ã‚Â³dulo de definiÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ SequÃƒÆ’Ã‚Âªncia de jogo
 *
 *  Arquivo gerado:              SEQJOGO.h
 *  Letras identificadoras:      SEQJ
 *
 *  Nome da base de software:    ArcabouÃƒÆ’Ã‚Â§o para a automaÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o de testes de programas redigidos em C
 *
 *  Projeto: Trabalho 2 - ProgramaÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o Modular
 *  Autores: EG - Eric Grinstein
 JM - Jordana Mecler
 LW - Leonardo Wajnsztok
 *
 *  $HA HistÃƒÆ’Ã‚Â³rico de evoluÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o:
 *     VersÃƒÆ’Ã‚Â£o      Autor            Data                ObservaÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Âµes
 *     2.0       EG,JM,LW        25/abr/2015       RevisÃƒÆ’Ã‚Â£o das funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Âµes
 *     1.0       EG,JM,LW        23/abr/2015       InÃƒÆ’Ã‚Â­cio do desenvolvimento
 *
 *  $ED DescriÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o do mÃƒÆ’Ã‚Â³dulo
 *      Este mÃƒÆ’Ã‚Â³dulo implementa funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Âµes para criar e manipular uma Sequencia de Jogo.
 *      Uma sequencia de jogo comeÃƒÆ’Ã‚Â§a com 5 ou 6 cartas, criada a partir de uma pilha
 *      distribuÃƒÆ’Ã‚Â­da por um baralho completo.
 *      ÃƒÆ’Ã¢â‚¬Â° possivel mover as cartas entre as sequencias de jogo existentes e quando
 *      umas delas possuir uma sequencia completa do mesmo naipe, estÃƒÆ’Ã‚Â¡ sequencia
 *      serÃƒÆ’Ã‚Â¡ levada a sequencia final.
 *
 ***************************************************************************/

#if defined( SEQJOGO_OWN )
#define SEQJOGO_EXT
#else
#define SEQJOGO_EXT extern
#endif

/***** DeclaraÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Âµes exportadas pelo mÃƒÆ’Ã‚Â³dulo *****/

/* Tipo referÃƒÆ’Ã‚Âªncia para uma SequÃƒÆ’Ã‚Âªncia de jogo */

typedef struct SEQJ_tagSeqJogo * SEQJ_tppSeqJ ;

/***********************************************************************
 *
 *  $TC Tipo de dados: SEQJ CondiÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Âµes de retorno
 *
 *
 *  $ED DescriÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o do tipo
 *     CondiÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Âµes de retorno das funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Âµes de SequÃƒÆ’Ã‚Âªncia de jogo
 *
 ***********************************************************************/

typedef enum {
    
    SEQJ_CondRetOK = 0,
    /* Concluiu corretamente */
    
    SEQJ_CondRetSequenciaVazia = 1,
    /* SequÃƒÆ’Ã‚Âªncia nÃƒÆ’Ã‚Â£o contÃƒÆ’Ã‚Â©m elementos */
    
    SEQJ_CondRetFaltouMemoria = 2,
    /* Faltou memÃƒÆ’Ã‚Â³ria ao tentar criar o sequÃƒÆ’Ã‚Âªncia */
    
    SEQJ_CondRetNumCartasIncorreto = 3,
    /* NÃƒÆ’Ã‚Âºmero de cartas a serem movidas estÃƒÆ’Ã‚Â¡ incorreto */
    
    SEQJ_CondRetCartasForaDaSequencia = 4
    /* Cartas escolhidas estÃƒÆ’Ã‚Â£o fora da sequÃƒÆ’Ã‚Âªncia */
    
} SEQJ_tpCondRet ;


/***********************************************************************
 *
 *  $FC FunÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ  Criar SequÃƒÆ’Ã‚Âªncia de jogo
 *
 *  $ED DescriÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o da funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o
 *     Cria uma nova sequÃƒÆ’Ã‚Âªncia de jogo a partir de uma pilha.
 *
 *  $EP ParÃƒÆ’Ã‚Â¢metros
 *     $P pSeqJ - ponteiro para a sequÃƒÆ’Ã‚Âªnca a ser criada.
 *     $P pPilha - pilha a partir da qual a seqÃƒÆ’Ã‚Â»encia irÃƒÆ’Ã‚Â¡ ser criada.
 *
 *  $FV Valor retornado
 *     SEQJ_CondRetOk    -   criou ok.
 *     SEQJ_CondRetFaltouMemoria -   faltou memÃƒÆ’Ã‚Â³ria para alocar espaÃƒÆ’Ã‚Â§o para a sequÃƒÆ’Ã‚Âªncia.
 *
 *
 *  Assertivas de entrada esperadas - pPilha != NULL
 *
 *  Assertivas de saÃƒÆ’Ã‚Â­da esperadas   - SEQJ_CondRetOK
 *                                     pSeqJ != NULL
 *
 *
 ***********************************************************************/

SEQJ_tpCondRet SEQJ_CriarSeqJogo ( SEQJ_tppSeqJ * pSeqJ, PIL_tppPilha pPilha ) ;


/***********************************************************************
 *
 *  $FC FunÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ Destruir SequÃƒÆ’Ã‚Âªncia de jogo
 *
 *  $ED DescriÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o da funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o
 *     Destroi uma sequÃƒÆ’Ã‚Âªncia de jogo.
 *
 *  $EP ParÃƒÆ’Ã‚Â¢metros
 *     $P pSeqJ - sequÃƒÆ’Ã‚Âªncia de jogo a ser excluÃƒÆ’Ã‚Â­da.
 *
 *  $FV Valor retornado
 *     SEQJ_CondRetOk    -   excluiu ok.
 *
 *  Assertivas de entrada esperadas - pSeqJ != NULL
 *
 *  Assertivas de saÃƒÆ’Ã‚Â­da esperadas   - SEQJ_CondRetOK
 *                                     pSeqJ == NULL
 *
 ***********************************************************************/

SEQJ_tpCondRet SEQJ_DestroiSequencia ( SEQJ_tppSeqJ pSeqJ ) ;


/***********************************************************************
 *
 *  $FC FunÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ Push Carta na sequÃƒÆ’Ã‚Âªncia de jogo
 *
 *  $ED DescriÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o da funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o
 *     A funÃƒÂ§ÃƒÂ£o da push em uma carta no inicio da Sequencia.
 *
 *  $EP ParÃƒÆ’Ã‚Â¢metros
 *     pSeqJ   - sequÃƒÆ’Ã‚Âªncia de jogo.
 *     pCarta  - carta a ser colocada na sequÃƒÆ’Ã‚Âªncia de jogo.
 *	  operacao - tipo da operacao: 1 caso seja uma transferencia entre
 *					sequencias, 0 caso seja uma carta vinda de um monte
 *
 *
 *  $FV Valor retornado
 *     SEQJ_CondRetOK      - push com sucesso.
 *     SEQJ_CondRetSequenciaVazia - sesquencia nao foi criada.
 *     SEQJ_CondRetCartasForaDaSequencia - carta nÃƒÂ£o estÃƒÂ¡ na sequÃƒÂªncia.
 *
 *   Assertivas de entrada esperadas - pSeqJ != NULL
 *                                      pCarta !=NULL
 *                                     pCarta ÃƒÂ© sequencia da primeira carta
 *                                     de pSeqJ->pPilha
 *                                     operacao == 0 || operacao == 1
 *
 *  Assertivas de saÃƒÆ’Ã‚Â­da esperadas   - SEQJ_CondRetOK
 *
 ***********************************************************************/

SEQJ_tpCondRet SEQJ_PushCartaSequencia( SEQJ_tppSeqJ pSeqJ, CAR_tppCarta pCarta , int operacao ) ;


/***********************************************************************
 *
 *  $FC FunÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ Pop Carta na sequÃƒÆ’Ã‚Âªncia de jogo
 *
 *  $ED DescriÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o da funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o
 *     A funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o da pop em uma carta no inicio da Sequencia.
 *
 *
 *  $EP ParÃƒÆ’Ã‚Â¢metros
 *     pSeqJ   - sequÃƒÆ’Ã‚Âªncia de jogo.
 *     pCarta  - ponteiro carta a ser retirada da sequÃƒÆ’Ã‚Âªncia de jogo.
 *
 *
 *  $FV Valor retornado
 *     SEQJ_CondRetOK      - pop com sucesso.
 *     SEQJ_CondRetSequenciaVazia - nao existem carta para pop
 *
 *  Assertivas de entrada esperadas - pSeqJ != NULL
 *
 *  Assertivas de saÃƒÆ’Ã‚Â­da esperadas   - SEQJ_CondRetOK
 *                                      pCarta != NULL
 *
 ***********************************************************************/

SEQJ_tpCondRet SEQJ_PopCartaSequencia( SEQJ_tppSeqJ pSeqJ, CAR_tppCarta * pCarta );

/***********************************************************************
 *
 *  $FC FunÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ Obtem Pilha da SequÃƒÆ’Ã‚Âªncia de jogo
 *
 *  $ED DescriÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o da funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o
 *     A funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o irÃƒÆ’Ã‚Â¡ preencher uma pilha com uma sequÃƒÆ’Ã‚Âªncia completa.
 *     ÃƒÆ’Ã¢â‚¬Â° usada para levar a sequÃƒÆ’Ã‚Âªncia que foi completa para a sequÃƒÆ’Ã‚Âªncia final.
 *
 *
 *  $EP ParÃƒÆ’Ã‚Â¢metros
 *     pSeqJ   - sequÃƒÆ’Ã‚Âªncia de jogo.
 *     pPilha -  ponteiro para a pilha a ser preenchida.
 *
 *
 *  $FV Valor retornado
 *     SEQJ_CondRetOK                 - preencheu pilha com sucesso com sucesso.
 *     SEQJ_CondRetSequenciaVazia     - sequÃƒÆ’Ã‚Âªncia vazia.
 *     SEQJ_CondRetNumCartasIncorreto - nÃƒÆ’Ã‚Â£o tem 13 cartas viradas.
 *
 *  Assertivas de entrada esperadas - pSeqJ != NULL
 *
 *  Assertivas de saÃƒÆ’Ã‚Â­da esperadas   - SEQJ_CondRetOK
 *                                      pPilha != NULL
 *
 ***********************************************************************/

SEQJ_tpCondRet SEQJ_ObtemPilhaSeqJ( SEQJ_tppSeqJ pSeqJ, PIL_tppPilha *pPilha ) ;

/***********************************************************************
 *
 *  $FC FunÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ Verifica SequÃƒÆ’Ã‚Âªncia completa
 *
 *  $ED DescriÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o da funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o
 *     A funÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o irÃƒÆ’Ã‚Â¡ verificar se existe uma sequÃƒÆ’Ã‚Âªncia de cartas
 *     no inÃƒÆ’Ã‚Â­cio da sequÃƒÆ’Ã‚Âªncia de jogo, que esteja completa, na
 *     ordem correta e mesmo naipe.
 *
 *
 *  $EP ParÃƒÆ’Ã‚Â¢metros
 *     pSeqJ - sequÃƒÆ’Ã‚Âªncia de jogo a ser verificada.
 *
 *
 *  $FV Valor retornado
 *     SEQJ_CondRetOk                      -   existe sequÃƒÆ’Ã‚Âªncia.
 *     SEQJ_CondRetCartasForaDaSequencia   - nao existe sequÃƒÆ’Ã‚Âªncia completa.
 *
 * *   Assertivas de entrada esperadas - pSeqJ != NULL
 *
 *  Assertivas de saÃƒÆ’Ã‚Â­da esperadas   - SEQJ_CondRetOK se existe uma sequencia completa.
 *
 *
 ***********************************************************************/

SEQJ_tpCondRet SEQJ_VerificaSeqCompleta( SEQJ_tppSeqJ pSeqJ );

/***********************************************************************
 *
 *  $FC FunÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ Num Cartas Viradas
 *
 *  $ED Descrição da função
 *     A função retorna o número de cartas viradas de uma sequência de jogo.
 *
 *
 *  $EP Parâmetros
 *     pSeqJ - sequÃƒÆ’Ã‚Âªncia de jogo a ser verificada.
 *	   numCartasViradas - ponteiro para o numero de cartas viradas.
 *
 *
 *  $FV Valor retornado
 *     SEQJ_CondRetOk                      -   existe sequÃƒÆ’Ã‚Âªncia.
 *
 *
 *
 ***********************************************************************/

SEQJ_tpCondRet SEQJ_NumCartasViradas( SEQJ_tppSeqJ pSeqJ, int *numCartasViradas );

/***********************************************************************
 *
 *  $FC FunÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ Vira Carta
 *
 *  $ED Descrição da função
 *     A função vira n cartas de uma sequencia.
 *
 *
 *  $EP Parâmetros
 *     pSeqJ - sequÃƒÆ’Ã‚Âªncia de jogo a ser verificada.
 *	   numCartas - numero de cartas a serem viradas.
 *
 *
 *  $FV Valor retornado
 *     SEQJ_CondRetOk                      -   existe sequÃƒÆ’Ã‚Âªncia.
 *
 *
 *
 ***********************************************************************/

SEQJ_tpCondRet SEQJ_ViraCarta( SEQJ_tppSeqJ pSeqJ, int numCartas );

/***********************************************************************
 *
 *  $FC FunÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ Total de Cartas na Sequencia
 *
 *  $ED Descrição da função
 *     A função diz o numero total de cartas em uma sequencia.
 *
 *
 *  $EP Parâmetros
 *     pSeqJ - sequÃƒÆ’Ã‚Âªncia de jogo a ser verificada.
 *
 *
 *  $FV Valor retornado
 *     numCartas                      -   numero de cartas.
 *
 *
 *
 ***********************************************************************/

int totalCartasNaSeq( SEQJ_tppSeqJ pSeqJ );

#undef SEQJ_EXT

/********** Fim do mÃƒÆ’Ã‚Â³dulo de definiÃƒÆ’Ã‚Â§ÃƒÆ’Ã‚Â£o: SEQJ SequÃƒÆ’Ã‚Âªncia de jogo **********/

#else
#endif

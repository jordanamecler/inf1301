#if ! defined( MON_ )
#define MON_
/***************************************************************************
 *
 *  $MCD M√≥dulo de defini√ß√£o: MON Monte
 *
 *  Arquivo gerado:              MONTE.h
 *  Letras identificadoras:      MON
 *
 *  Nome da base de software:    Arcabou√ßo para a automa√ß√£o de testes de programas redigidos em C
 *
 *  Projeto: Trabalho 2 - Programa√ß√£o Modular
 *  Autores: EG - Eric Grinstein
             JM - Jordana Mecler
             LW - Leonardo Wajnsztok
 *
 *  $HA Hist√≥rico de evolu√ß√£o:
 *     Vers√£o      Autor            Data                Observa√ß√µes
 *     1.0       EG,JM,LW        18/abr/2015       In√≠cio do desenvolvimento
 *     
 *  $ED Descri√ß√£o do m√≥dulo
 *     Este m√≥dulo implementa fun√ß√µes para criar e manipular um Monte.
 *     Um Monte √© uma pilha de 10 cartas.
 *     O monte √© criado a partir de uma pilha de cartas.
 *     √â poss√≠vel retirar uma carta de cada vez do monte
 *     e nao pode colocar nenhuma carta no monte.
 *
 ***************************************************************************/

#if defined( MON_OWN )
    #define MON_EXT
#else
    #define MON_EXT extern
#endif

#include "PILHA_DE_CARTAS.h"

/***** Declara√ß√µes exportadas pelo m√≥dulo *****/

/* Tipo refer√™ncia para um monte */

typedef struct MON_tagMonte * MON_tppMonte ;

/***********************************************************************
 *
 *  $TC Tipo de dados: MON Condi√ß√µes de retorno
 *
 *
 *  $ED Descri√ß√£o do tipo
 *     Condi√ß√µes de retorno das fun√ß√µes de Monte
 *
 ***********************************************************************/

    typedef enum {

        MON_CondRetOK = 0,
               /* Concluiu corretamente */

        MON_CondRetMonteVazio = 1,
               /* O monte n√£o cont√©m elementos */

        MON_CondRetFaltouMemoria = 2
               /* Faltou mem√≥ria ao tentar criar o monte */

   } MON_tpCondRet ;


/***********************************************************************
 *
 *  $FC Fun√ß√£o: MON  Criar monte
 *
 *  $ED Descri√ß√£o da fun√ß√£o
 *     Cria um novo monte a partir de uma pilha.
 *
 *  $EP Par√¢metros
 *     $P pMonte - ponteira para o monte a ser criado.
 *     $P pPilha - pilha a partir da qual o monte ir√° ser criado.
 *
 *  $FV Valor retornado
 *     MON_CondRetOk    -   criou ok.
 *     MON_CondRetFaltouMemoria -   faltou mem√≥ria para alocar espa√ßo para o monte.
 *
 *  Assertivas de entrada esperadas - pPilha != NULL.
 * 
 *  Assertivas de saÌda esperadas   - MON_CondRetOk
 *                                     MON_CondRetFaltouMemoria se pMonte == NULL
 *
 ***********************************************************************/

MON_tpCondRet MON_CriarMonte ( MON_tppMonte * pMonte , PIL_tppPilha pPilha) ;


/***********************************************************************
 *
 *  $FC FunÁ„o: CAR  Destruir monte
 *
 *  $ED DescriÁ„o da funÁ„o
 *     Destroi um monte.
 *
 *  $EP Par‚metros
 *     $P pMonte - ponteiro para o monte a ser excluÌda.
 *
 *  $FV Valor retornado
 *     MON_CondRetOk    -   excluiu ok.
 * 
 *  Assertivas de entrada esperadas - pMonte != NULL.
 * 
 *  Assertivas de saÌda esperadas   - pMonte == NULL
 *                                   
 *
 ***********************************************************************/

MON_tpCondRet MON_DestruirMonte ( MON_tppMonte pMonte ) ;


/***********************************************************************
*
*  $FC FunÁ„o: MON Pop Carta
*
*  $ED DescriÁ„o da funÁ„o
*     Remove carta do topo do monte
*     
*
*  $EP Par‚metros
*     pMonte - ponteiro para o monte.
*     pCarta - endereÁo que receber· a carta removida.
*              
*
*  $FV Valor retornado
*     MON_CondRetOk     -   pop com sucesso.
*     MON_CondRetMonteVazio     - monte vazio.
* 
*  Assertivas de entrada esperadas - pMonte != NULL.
*                                      pCarta == NULL
* 
*  Assertivas de saÌda esperadas   - pCarta != NULL
*
***********************************************************************/

MON_tpCondRet MON_PopCartaMonte ( MON_tppMonte pMonte, CAR_tppCarta * pCarta ) ;

#undef MON_EXT

/********** Fim do m√≥dulo de defini√ß√£o: MON Monte **********/

#else
#endif